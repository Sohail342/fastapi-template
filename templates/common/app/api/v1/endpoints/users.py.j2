"""User endpoints."""

from typing import Any, List

from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session

from app import users as users_service
from app.core.config import settings
from app.schemas.user import User, UserCreate, UserUpdate

router = APIRouter()


@router.get("/", response_model=List[User])
def read_users(
    skip: int = 0,
    limit: int = 100,
    current_user: Any = Depends(users_service.get_current_active_superuser),
) -> Any:
    """
    Retrieve users.
    """
    return users_service.get_users(skip=skip, limit=limit)


@router.post("/", response_model=User)
def create_user(
    *,
    user_in: UserCreate,
    current_user: Any = Depends(users_service.get_current_active_superuser),
) -> Any:
    """
    Create new user.
    """
    user = users_service.get_user_by_email(email=user_in.email)
    if user:
        raise HTTPException(
            status_code=400,
            detail="A user with this email already exists.",
        )
    user = users_service.create_user(user_in=user_in)
    return user


@router.get("/me", response_model=User)
def read_user_me(
    current_user: Any = Depends(users_service.get_current_active_user),
) -> Any:
    """
    Get current user.
    """
    return current_user


@router.put("/me", response_model=User)
def update_user_me(
    *,
    user_in: UserUpdate,
    current_user: Any = Depends(users_service.get_current_active_user),
) -> Any:
    """
    Update own user.
    """
    current_user_data = current_user.dict()
    user_data = user_in.dict(exclude_unset=True)
    for field in user_data:
        if field in current_user_data:
            setattr(current_user, field, user_data[field])
    user = users_service.update_user(user_id=current_user.id, user_in=current_user)
    return user


@router.get("/{user_id}", response_model=User)
def read_user_by_id(
    user_id: int,
    current_user: Any = Depends(users_service.get_current_active_user),
) -> Any:
    """
    Get a specific user by id.
    """
    user = users_service.get_user(user_id=user_id)
    if user == current_user:
        return user
    if not users_service.is_superuser(current_user):
        raise HTTPException(
            status_code=400, detail="The user doesn't have enough privileges"
        )
    return user


@router.put("/{user_id}", response_model=User)
def update_user(
    *,
    user_id: int,
    user_in: UserUpdate,
    current_user: Any = Depends(users_service.get_current_active_superuser),
) -> Any:
    """
    Update a user.
    """
    user = users_service.get_user(user_id=user_id)
    if not user:
        raise HTTPException(
            status_code=404,
            detail="The user with this id does not exist in the system",
        )
    user = users_service.update_user(user_id=user_id, user_in=user_in)
    return user